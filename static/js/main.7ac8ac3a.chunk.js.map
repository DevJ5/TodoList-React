{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","third","React","createRef","state","text","handleChange","e","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","console","log","refs","first","second","current","newTodo","id","shortid","generate","completed","props","onSubmit","_this2","this","react_default","a","createElement","ref","type","onChange","placeholder","btn","Component","Todo","todo","className","style","textDecoration","onClick","toggleComplete","deleteTodo","TodoList","todos","todoToShow","addTodo","concat","toConsumableArray","map","objectSpread","updateTodoToShow","filter","deleteCompletedTodos","toggleAll","every","showDeleteAllButton","some","key","length","TodoForm_TodoForm","App","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAGqBA,6MACpBC,MAAQC,IAAMC,cAKdC,MAAQ,CACPC,KAAM,MAGPC,aAAe,SAAAC,GACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBH,EAAEK,OAAOC,KAAON,EAAEK,OAAOE,WAG3CC,aAAe,SAAAR,GACdA,EAAES,iBACFC,QAAQC,IAAIV,EAAKW,KAAKC,MAAOZ,EAAKa,OAAQb,EAAKP,MAAMqB,SACrD,IAAMC,EAAU,CACfC,GAAIC,IAAQC,WACZrB,KAAMG,EAAKJ,MAAMC,KACjBsB,WAAW,GAGZnB,EAAKoB,MAAMC,SAASN,GAEpBf,EAAKC,SAAS,CACbJ,KAAM,8EAIC,IAAAyB,EAAAC,KACR,OACCC,EAAAC,EAAAC,cAAA,QAAMC,IAAKJ,KAAK9B,MAAO4B,SAAUE,KAAKhB,cACrCiB,EAAAC,EAAAC,cAAA,SACCC,IAAI,QACJC,KAAK,OACLvB,KAAK,OACLC,MAAOiB,KAAK3B,MAAMC,KAClBgC,SAAUN,KAAKzB,aACfgC,YAAY,YAEbN,EAAAC,EAAAC,cAAA,UAAQC,IAAK,SAAAI,GAAG,OAAKT,EAAKT,OAASkB,IAAnC,eAzCkCC,aCDvB,SAASC,EAAKb,GAAO,IAC3Bc,EAASd,EAATc,KACR,OACCV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACdX,EAAAC,EAAAC,cAAA,QACCU,MAAO,CACNC,eAAgBH,EAAKf,UAAY,eAAiB,MAGnDmB,QAASlB,EAAMmB,gBACdL,EAAKrC,MAEP2B,EAAAC,EAAAC,cAAA,UAAQY,QAASlB,EAAMoB,YAAvB,UCVkBC,6MACpB7C,MAAQ,CACP8C,MAAO,GACPC,WAAY,SAGbC,QAAU,SAAA7B,GACTf,EAAKC,SAAS,CACbyC,MAAK,CAAG3B,GAAH8B,OAAA3C,OAAA4C,EAAA,EAAA5C,CAAeF,EAAKJ,MAAM8C,aAIjCH,eAAiB,SAAAvB,GAChBhB,EAAKC,SAAS,CACbyC,MAAO1C,EAAKJ,MAAM8C,MAAMK,IAAI,SAAAb,GAC3B,OAAIA,EAAKlB,KAAOA,EACRd,OAAA8C,EAAA,EAAA9C,CAAA,GAAKgC,EAAZ,CAAkBf,WAAYe,EAAKf,YAE7Be,SAKVe,iBAAmB,SAAAlD,GAClBC,EAAKC,SAAS,CACb0C,WAAY5C,EAAEK,OAAOE,WAIvBkC,WAAa,SAAAxB,GACZhB,EAAKC,SAAS,CACbyC,MAAO1C,EAAKJ,MAAM8C,MAAMQ,OAAO,SAAAhB,GAAI,OAAIA,EAAKlB,KAAOA,SAIrDmC,qBAAuB,WACtBnD,EAAKC,SAAS,CACbyC,MAAO1C,EAAKJ,MAAM8C,MAAMQ,OAAO,SAAAhB,GAAI,OAAKA,EAAKf,iBAI/CiC,UAAY,WACPpD,EAAKJ,MAAM8C,MAAMW,MAAM,SAAAnB,GAAI,OAAIA,EAAKf,YACvCnB,EAAKC,SAAS,SAAAL,GAAK,MAAK,CACvB8C,MAAO9C,EAAM8C,MAAMK,IAAI,SAAAb,GACtB,OAAOhC,OAAA8C,EAAA,EAAA9C,CAAA,GAAKgC,EAAZ,CAAkBf,WAAW,SAI/BnB,EAAKC,SAAS,SAAAL,GAAK,MAAK,CACvB8C,MAAO1C,EAAKJ,MAAM8C,MAAMK,IAAI,SAAAb,GAC3B,OAAOhC,OAAA8C,EAAA,EAAA9C,CAAA,GAAKgC,EAAZ,CAAkBf,WAAW,kFAMxB,IAAAG,EAAAC,KACF+B,IAAwB/B,KAAK3B,MAAM8C,MAAMa,KAAK,SAAArB,GAAI,OAAIA,EAAKf,YAC7DuB,EAAQ,GAQZ,MAN8B,QAA1BnB,KAAK3B,MAAM+C,WAAsBD,EAAQnB,KAAK3B,MAAM8C,MACrB,WAA1BnB,KAAK3B,MAAM+C,WACnBD,EAAQnB,KAAK3B,MAAM8C,MAAMQ,OAAO,SAAAhB,GAAI,OAAKA,EAAKf,YACZ,cAA1BI,KAAK3B,MAAM+C,aACnBD,EAAQnB,KAAK3B,MAAM8C,MAAMQ,OAAO,SAAAhB,GAAI,OAAIA,EAAKf,aAG7CK,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbO,EAAMK,IAAI,SAAAb,GAAI,OACdV,EAAAC,EAAAC,cAACO,EAAD,CACCuB,IAAKtB,EAAKlB,GACVkB,KAAMA,EACNK,eAAgB,kBAAMjB,EAAKiB,eAAeL,EAAKlB,KAC/CwB,WAAY,kBAAMlB,EAAKkB,WAAWN,EAAKlB,SAGzCQ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cAAf,eACcZ,KAAK3B,MAAM8C,MAAMQ,OAAO,SAAAhB,GAAI,OAAKA,EAAKf,YAAWsC,QAE/DjC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,kBACdX,EAAAC,EAAAC,cAAA,UAAQpB,MAAM,MAAMgC,QAASf,KAAK0B,kBAAlC,OAGAzB,EAAAC,EAAAC,cAAA,UAAQpB,MAAM,SAASgC,QAASf,KAAK0B,kBAArC,UAGAzB,EAAAC,EAAAC,cAAA,UAAQpB,MAAM,YAAYgC,QAASf,KAAK0B,kBAAxC,cAKAK,GACA9B,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBACdX,EAAAC,EAAAC,cAAA,UAAQY,QAASf,KAAK4B,sBAAtB,qBAKF3B,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cACdX,EAAAC,EAAAC,cAAA,UAAQY,QAASf,KAAK6B,WAAtB,eAED5B,EAAAC,EAAAC,cAACgC,EAAD,CAAUrC,SAAUE,KAAKqB,kBAtGSZ,aCUvB2B,mLARb,OACCnC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACdX,EAAAC,EAAAC,cAACkC,EAAD,cAJc5B,aCQE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7ac8ac3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport shortid from 'shortid';\n\nexport default class TodoForm extends Component {\n\tthird = React.createRef();\n\t// constructor() {\n\t// \tthis.third = React.createRef()\n\t// }\n\n\tstate = {\n\t\ttext: ''\n\t};\n\n\thandleChange = e => {\n\t\tthis.setState({ [e.target.name]: e.target.value });\n\t};\n\n\thandleSubmit = e => {\n\t\te.preventDefault();\n\t\tconsole.log(this.refs.first, this.second, this.third.current);\n\t\tconst newTodo = {\n\t\t\tid: shortid.generate(),\n\t\t\ttext: this.state.text,\n\t\t\tcompleted: false\n\t\t};\n\n\t\tthis.props.onSubmit(newTodo);\n\n\t\tthis.setState({\n\t\t\ttext: ''\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form ref={this.third} onSubmit={this.handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tref=\"first\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"text\"\n\t\t\t\t\tvalue={this.state.text}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tplaceholder=\"Todo...\"\n\t\t\t\t/>\n\t\t\t\t<button ref={btn => (this.second = btn)}>Add</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","import React from 'react';\n\nexport default function Todo(props) {\n\tconst { todo } = props;\n\treturn (\n\t\t<div className=\"todo-item\">\n\t\t\t<span\n\t\t\t\tstyle={{\n\t\t\t\t\ttextDecoration: todo.completed ? 'line-through' : null\n\t\t\t\t}}\n\t\t\t\t// className={todo.completed ? 'completed' : null}\n\t\t\t\tonClick={props.toggleComplete}>\n\t\t\t\t{todo.text}\n\t\t\t</span>\n\t\t\t<button onClick={props.deleteTodo}>X</button>\n\t\t</div>\n\t);\n}\n","import React, { Component } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nexport default class TodoList extends Component {\n\tstate = {\n\t\ttodos: [],\n\t\ttodoToShow: 'all'\n\t};\n\n\taddTodo = newTodo => {\n\t\tthis.setState({\n\t\t\ttodos: [newTodo, ...this.state.todos]\n\t\t});\n\t};\n\n\ttoggleComplete = id => {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.map(todo => {\n\t\t\t\tif (todo.id === id) {\n\t\t\t\t\treturn { ...todo, completed: !todo.completed };\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t})\n\t\t});\n\t};\n\n\tupdateTodoToShow = e => {\n\t\tthis.setState({\n\t\t\ttodoToShow: e.target.value\n\t\t});\n\t};\n\n\tdeleteTodo = id => {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.filter(todo => todo.id !== id)\n\t\t});\n\t};\n\n\tdeleteCompletedTodos = () => {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.filter(todo => !todo.completed)\n\t\t});\n\t};\n\n\ttoggleAll = () => {\n\t\tif (this.state.todos.every(todo => todo.completed)) {\n\t\t\tthis.setState(state => ({\n\t\t\t\ttodos: state.todos.map(todo => {\n\t\t\t\t\treturn { ...todo, completed: false };\n\t\t\t\t})\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.setState(state => ({\n\t\t\t\ttodos: this.state.todos.map(todo => {\n\t\t\t\t\treturn { ...todo, completed: true };\n\t\t\t\t})\n\t\t\t}));\n\t\t}\n\t};\n\n\trender() {\n\t\tconst showDeleteAllButton = !!this.state.todos.some(todo => todo.completed);\n\t\tlet todos = [];\n\n\t\tif (this.state.todoToShow === 'all') todos = this.state.todos;\n\t\telse if (this.state.todoToShow === 'active')\n\t\t\ttodos = this.state.todos.filter(todo => !todo.completed);\n\t\telse if (this.state.todoToShow === 'completed')\n\t\t\ttodos = this.state.todos.filter(todo => todo.completed);\n\n\t\treturn (\n\t\t\t<div className=\"todo-list\">\n\t\t\t\t{todos.map(todo => (\n\t\t\t\t\t<Todo\n\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\ttoggleComplete={() => this.toggleComplete(todo.id)}\n\t\t\t\t\t\tdeleteTodo={() => this.deleteTodo(todo.id)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<div className=\"todos-left\">\n\t\t\t\t\tTodos left: {this.state.todos.filter(todo => !todo.completed).length}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"filter-buttons\">\n\t\t\t\t\t<button value=\"all\" onClick={this.updateTodoToShow}>\n\t\t\t\t\t\tAll\n\t\t\t\t\t</button>\n\t\t\t\t\t<button value=\"active\" onClick={this.updateTodoToShow}>\n\t\t\t\t\t\tActive\n\t\t\t\t\t</button>\n\t\t\t\t\t<button value=\"completed\" onClick={this.updateTodoToShow}>\n\t\t\t\t\t\tCompleted\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t{showDeleteAllButton && (\n\t\t\t\t\t<div className=\"delete-completed\">\n\t\t\t\t\t\t<button onClick={this.deleteCompletedTodos}>\n\t\t\t\t\t\t\tDelete Completed\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div className=\"toggle-all\">\n\t\t\t\t\t<button onClick={this.toggleAll}>Toggle All</button>\n\t\t\t\t</div>\n\t\t\t\t<TodoForm onSubmit={this.addTodo} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<TodoList />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}